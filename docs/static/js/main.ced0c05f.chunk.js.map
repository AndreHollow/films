{"version":3,"sources":["reducers/films.js","reducers/navigation.js","reducers/index.js","actions/index.js","containers/AddButton.js","containers/SortButton.js","containers/Search.js","containers/Import.js","components/commandBar/NavBar.js","containers/DeleteFilm.js","components/content/Film.js","components/content/FilmsList.js","containers/FiltredFilmsList.js","components/App.js","serviceWorker.js","index.js"],"names":["films","state","arguments","length","undefined","id","title","year","format","stars","toggled","action","type","Object","toConsumableArray","concat","map","film","objectSpread","filter","navigation","isSorted","searchData","isTitle","combineReducers","nextTodoId","addFilm","deleteFilm","searchConfirm","AddFilm","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","titleInput","React","createRef","yearInput","formatInput","starsInput","handleTitleChange","current","value","trim","setState","isEnabled","handleSubmit","e","preventDefault","store","dispatch","split","handleBurgerClick","isBurgerOpen","_this2","react_default","a","createElement","className","onClick","htmlFor","onSubmit","ref","onChange","disabled","Component","connect","_ref","checked","Search","searchInput","handleSwitch","titleChosen","actorsChosen","handleSearchChange","errorMessage","console","log","toLowerCase","style","color","parseFileToArray","stringFromFile","parsedArray","objFull","el","row","push","addToGlobalState","obj","Import","readFile","object","file","files","reader","FileReader","onload","result","readAsText","handleInputChange","isFileChosen","document","getElementById","borderColor","accept","NavBar","containers_AddButton","containers_SortButton","src_containers_Import","src_containers_Search","Film","DeleteFilm","join","FilmsList","filmsFinal","toggleFilm","includes","star","some","Array","isArray","sort","b","localeCompare","components_content_Film","assign","key","App","components_commandBar_NavBar","FiltredFilmsList","Boolean","window","location","hostname","match","__webpack_require__","d","__webpack_exports__","createStore","rootReducer","ReactDOM","render","es","components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ced0c05f.chunk.js","sourcesContent":["const films = (state = [\r\n  {\r\n    id: 0,\r\n    title: 'Star Wars: Redux invasion',\r\n    year: '2003',\r\n    format: 'DVD',\r\n    stars: ['Yoda theMaster', 'Luke Sky', 'Wookie', 'Cowboy Boss'],\r\n    toggled: false\r\n  },\r\n  {\r\n    id: 1,\r\n    title: 'Abuss The Begining',\r\n    year: '1245',\r\n    format: 'VHS',\r\n    stars: ['Baal theDemonLord', 'Abbadon', 'Lucifer the King'],\r\n    toggled: false\r\n  }\r\n], action) => {\r\n  switch (action.type) {\r\n    case 'ADD_FILM':\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.id,\r\n          title: action.title,\r\n          year: action.year,\r\n          format: action.format,\r\n          stars: [...action.stars],\r\n          toggled: false\r\n        }\r\n      ]\r\n    case 'TOGGLE_FILM':\r\n      return state.map(film => film.id === action.id ? {...film, toggled: !film.toggled} : film)\r\n    case 'DELETE_FILM':\r\n      return state.filter(film => film.id !== action.id);\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default films","const navigation = (state={isSorted: false, searchData: '', isTitle: true}, action) => {\r\n  switch (action.type){\r\n    case 'TOGGLE_SORTING':\r\n      return {...state, isSorted: !state.isSorted}\r\n    case 'SEARCH_COMFIRM':\r\n      return {...state, searchData: action.searchData, isTitle: action.isTitle}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default navigation","import { combineReducers } from 'redux'\r\nimport films from './films'\r\nimport navigation from './navigation'\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default combineReducers({\r\n  navigation,\r\n  films\r\n})","let nextTodoId = 2\r\n\r\nexport const addFilm = (title, year, format, stars) => ({\r\n  type: 'ADD_FILM',\r\n  id: nextTodoId++,\r\n  title,\r\n  year,\r\n  format,\r\n  stars\r\n})\r\n\r\nexport const toggleFilm = id => ({\r\n  type: 'TOGGLE_FILM',\r\n  id\r\n})\r\n\r\nexport const toggleSorting = isSorted => ({\r\n  type: 'TOGGLE_SORTING',\r\n  isSorted\r\n})\r\n\r\nexport const deleteFilm = id => ({\r\n  type: 'DELETE_FILM',\r\n  id\r\n})\r\n\r\nexport const searchConfirm = (searchData, isTitle) => ({\r\n  type: 'SEARCH_COMFIRM',\r\n  searchData,\r\n  isTitle\r\n})","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addFilm } from '../actions'\r\nimport {store} from '../index'\r\nimport './AddButton.css'\r\n\r\nclass AddFilm extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isEnabled: false,\r\n      isBurgerOpen: false\r\n    }\r\n  }\r\n  titleInput = React.createRef();\r\n  yearInput = React.createRef();\r\n  formatInput = React.createRef();\r\n  starsInput = React.createRef();\r\n  \r\n  handleTitleChange = () => {\r\n    if(!this.titleInput.current.value.trim())\r\n      this.setState({\r\n        isEnabled: false\r\n      })\r\n    else\r\n      this.setState({\r\n        isEnabled: true\r\n      })\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (!this.titleInput.current.value.trim() &&\r\n        !this.yearInput.current.value.trim() &&\r\n        !this.formatInput.current.value.trim() &&\r\n        !this.starsInput.current.value.trim())\r\n      return\r\n    if(!this.yearInput.current.value.trim())\r\n      this.yearInput.current.value = 'No information provided'\r\n    if(!this.formatInput.current.value.trim())\r\n      this.formatInput.current.value = 'No information provided'\r\n    if(!this.starsInput.current.value.trim())\r\n      this.starsInput.current.value = 'No information provided'\r\n    \r\n    store.dispatch(\r\n      addFilm(\r\n        this.titleInput.current.value, \r\n        this.yearInput.current.value, \r\n        this.formatInput.current.value, \r\n        this.starsInput.current.value.split(', ')\r\n      )\r\n    )\r\n\r\n    this.titleInput.current.value = ''\r\n    this.yearInput.current.value = ''\r\n    this.formatInput.current.value = ''\r\n    this.starsInput.current.value = ''\r\n    this.setState({\r\n      isEnabled: false\r\n    })\r\n  }\r\n  \r\n  handleBurgerClick = () =>{\r\n    this.setState({\r\n      isBurgerOpen: !this.state.isBurgerOpen\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className = 'addbutton-container'>\r\n        <input \r\n          className=\"burger-check\" \r\n          id=\"burger-check\" \r\n          type=\"checkbox\" \r\n          onClick = {this.handleBurgerClick}\r\n          />\r\n        <label htmlFor=\"burger-check\" id = 'burger' className=\"burger\"></label>\r\n        <form\r\n          id= \"show-form\" \r\n          className= \"show-form\"\r\n          onSubmit={this.handleSubmit}\r\n          >\r\n          <div className = 'field'>\r\n            <span className = 'field-name'>Title: </span>\r\n            <input\r\n              type = 'text'\r\n              className = 'add-field' \r\n              ref={this.titleInput} \r\n              onChange = {() => this.handleTitleChange()} \r\n            />\r\n          </div>\r\n          <div className = 'field'>\r\n            <span className = 'field-name'>Year: </span>\r\n            <input className = 'add-field' type = 'text' ref={this.yearInput} />\r\n          </div>\r\n          <div className = 'field'>\r\n            <span className = 'field-name'>Format: </span>\r\n            <input className = 'add-field' type = 'text' ref={this.formatInput} />\r\n          </div>\r\n          <div className = 'field'>\r\n            <span className = 'field-name'>Stars: </span>\r\n            <input className = 'add-field' type = 'text' ref={this.starsInput} />\r\n          </div>\r\n          \r\n          <div className = 'addbutton-wrapper'>\r\n            <button \r\n              className = 'addbutton'\r\n              type=\"submit\" \r\n              disabled = {!this.state.isEnabled}\r\n              >\r\n              Add Film\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default connect()(AddFilm)\r\n\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { toggleSorting } from '../actions'\r\nimport './SortButton.css'\r\n\r\nconst SortBox = ({isSorted, dispatch}) => {\r\n  \r\n  return (\r\n    <div className = 'sort-container'>\r\n      <label className = 'checkbox-text' htmlFor=\"sort-box\">Sort films by alphabet: </label>\r\n      <input \r\n        type=\"checkbox\" \r\n        className = 'checkbox'\r\n        onChange = {e => {\r\n          dispatch(toggleSorting());\r\n        }}\r\n        checked = {isSorted} \r\n      />  \r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isSorted: state.navigation.isSorted\r\n})\r\n\r\nexport default connect(mapStateToProps)(SortBox)","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { searchConfirm } from '../actions'\r\nimport {store} from '../index'\r\nimport './Search.css'\r\n\r\nclass Search extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      titleChosen: true,\r\n      actorsChosen: false,\r\n      searchData: '',\r\n      errorMessage: ''\r\n    }\r\n  }\r\n\r\n  searchInput = React.createRef();\r\n\r\n  handleSwitch = () => {\r\n    this.setState({\r\n      titleChosen: !this.state.titleChosen,\r\n      actorsChosen: !this.state.actorsChosen\r\n    })\r\n  }\r\n\r\n  handleSearchChange = () => {\r\n    this.setState({\r\n      searchData: this.searchInput.current.value,\r\n      errorMessage: this.state.searchData.length > 40 ? 'Invalid input' : ''\r\n    })\r\n\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    if(this.state.errorMessage)\r\n      return\r\n    else{\r\n      if(!this.state.titleChosen){\r\n        console.log(store.dispatch(searchConfirm(this.state.searchData.toLowerCase(), this.state.titleChosen)))\r\n      }\r\n      if(!this.state.actorsChosen){\r\n        console.log(store.dispatch(searchConfirm(this.state.searchData.toLowerCase(), this.state.titleChosen)))\r\n      }\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n        <form className = 'search-form-container'  onSubmit = {this.handleSubmit}>\r\n          <div \r\n            className = 'toogle-option'\r\n            style = {{\r\n              color: this.state.titleChosen ? 'limegreen' : 'inherit'\r\n            }}\r\n          >\r\n            Title\r\n          </div>\r\n\r\n          <div className=\"toggleWrapper\">\r\n            <input \r\n              type=\"checkbox\" \r\n              onClick={this.handleSwitch} \r\n              className=\"dn\" \r\n              id=\"dn\"\r\n              />\r\n            <label htmlFor=\"dn\" className=\"toggle\">\r\n              <span className=\"toggle__handler\"></span>\r\n            </label>\r\n            <div className=\"bear-body\">\r\n              <span className=\"eye left\"></span>\r\n              <span className=\"eye right\"></span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div \r\n            className = 'toogle-option'\r\n            style = {{\r\n              color: this.state.actorsChosen ? 'limegreen' : 'inherit'\r\n            }}\r\n          >\r\n            Actor\r\n          </div>\r\n          <div className = 'searchfield-container'>\r\n            <input \r\n              type='text' \r\n              className = 'search-field'\r\n              ref={this.searchInput} \r\n              onChange = {() => this.handleSearchChange()}\r\n              />\r\n            <div className = 'error-message'>{this.state.errorMessage}</div>\r\n          </div>\r\n          \r\n        </form>\r\n      \r\n    )\r\n  }\r\n}\r\n\r\nexport default connect()(Search)","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { addFilm } from '../actions'\r\nimport {store} from '../index'\r\nimport './Import.css'\r\n\r\nconst parseFileToArray = (stringFromFile) => { \r\n  let parsedArray = [];\r\n  let objFull = {};\r\n\r\n  stringFromFile.split('\\n').map(el => {\r\n    let row = el.split(': ');\r\n\r\n    if(row[0] === 'Title' || row[0] === 'Format' || row[0] === 'Stars'){\r\n      objFull[row[0].toLowerCase()] = row[1];\r\n    }\r\n    else if (row[0] === 'Release Year'){\r\n      objFull['year'] =  row[1];\r\n    }\r\n\r\n    if(objFull.title && row[1] === undefined){\r\n      parsedArray.push(objFull);\r\n      objFull = {};\r\n    } \r\n\r\n  });\r\n\r\n  return parsedArray\r\n}\r\n\r\nconst addToGlobalState = (parsedArray) => {\r\n  let year, format, stars;\r\n  parsedArray.map(obj => {\r\n    year = obj.year ? obj.year : 'No information provided';\r\n    format = obj.format ? obj.format : 'No information provided';\r\n    stars = obj.stars ? obj.stars : 'No information provided';\r\n\r\n    store.dispatch(\r\n      addFilm(obj.title, year, format, stars.split(', '))\r\n    )\r\n  })\r\n}\r\n\r\nclass Import extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      isFileChosen: false\r\n    }\r\n  }\r\n\r\n  readFile = (object) => {\r\n    let file = object.files[0];\r\n    let reader = new FileReader();\r\n    let parsedArray;\r\n\r\n    reader.onload = function() {\r\n      parsedArray = parseFileToArray(reader.result);\r\n      addToGlobalState(parsedArray); \r\n      \r\n    }\r\n    reader.readAsText(file)\r\n  }\r\n\r\n  handleInputChange = () => {\r\n    this.setState({\r\n      isFileChosen: document.getElementById('file').value !== '' ? true : false\r\n    })\r\n  }\r\n\r\n    /*\r\n    <form onSubmit={\r\n        РАЗОБРАТЬСЯ КАК ВЫТАЩИТЬ ИЗ ФАЙЛА СТРОКУ А ПОТОМ ПАРСИТЬ ЕЁ ЧЕРЕЗ СПЛИТЫ, ПОСМОТРЕТЬ ЧТО ПИСАЛ ЮЗЕРНЕЙМ И БОГДАН\r\n\r\n      }\r\n      */\r\n\r\n  render() {\r\n    return (\r\n      <div className = 'import-container'>\r\n        <label \r\n          htmlFor=\"file\" \r\n          style = {{\r\n            borderColor: this.state.isFileChosen ? 'limegreen' : '#d5c6e0'\r\n          }} \r\n          className = 'import-choosefile'\r\n        >\r\n          <input \r\n            type=\"file\" \r\n            id=\"file\" \r\n            accept=\".txt\" \r\n            \r\n            onChange = {this.handleInputChange} \r\n            />\r\n            Import file\r\n        </label>\r\n        \r\n        <button \r\n          disabled = {!this.state.isFileChosen} \r\n          className = 'import-submit'\r\n          onClick={() => this.readFile(document.getElementById('file'))}\r\n        >\r\n          Read!\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect()(Import)","import React from 'react'\r\nimport AddButton from '../../containers/AddButton'\r\nimport SortButton from '../../containers/SortButton'\r\nimport Search from '../../containers/Search'\r\nimport Import from '../../containers/Import'\r\nimport './NavBar.css'\r\n\r\nconst NavBar = () => (\r\n  <nav className = 'nav-menu'>\r\n    <AddButton />\r\n    <SortButton />\r\n    <Import />\r\n    <Search />\r\n  </nav>\r\n)\r\n\r\nexport default NavBar","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {deleteFilm} from '../actions'\r\n\r\nlet RemoveFilm = ({id, dispatch}) => {\r\n  return (\r\n      <div>\r\n        <button className = 'delete-film' onClick={e => {\r\n          e.preventDefault();\r\n          dispatch(deleteFilm(id));\r\n\r\n          console.log(dispatch(deleteFilm(id)));\r\n        }}>Remove film</button>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default connect()(RemoveFilm)","import React from 'react'\r\nimport DeleteFilm from '../../containers/DeleteFilm'\r\nimport './Film.css'\r\n\r\nconst Film = ({onClick, id, title, year, format, stars, toggled}) => (\r\n  <li className = 'film'>\r\n    <div> {title} </div>\r\n    <input className=\"burger-check1\" id=\"burger-check1\" type=\"checkbox\" checked = {toggled} />\r\n    <label htmlFor=\"burger-check1\" className=\"burger1\" onClick={onClick}>Show more</label>\r\n    \r\n    <DeleteFilm id = {id} />\r\n    <div \r\n      id= \"show-more\" \r\n      className= \"show-more\"\r\n    >\r\n      <span><b>Title: </b>{title} </span>\r\n      <span><b>Year: </b>{year} </span>\r\n      <span><b>Format: </b> {format} </span>\r\n      <span><b>Stars: </b>{stars.join(', ')} </span>\r\n    </div>\r\n  </li>\r\n)\r\n\r\nexport default Film","import React from 'react'\r\nimport Film from './Film'\r\n\r\nconst FilmsList = ({ films, searchData, isTitle, isSorted, toggleFilm }) => {\r\n  let filmsFinal;\r\n  if(isTitle){\r\n    if(searchData){\r\n      if(!isTitle){\r\n        filmsFinal = films.filter(film => film.stars.map(star => star.toLowerCase().includes(searchData)).some(result => result))\r\n      }\r\n      else{\r\n        filmsFinal = films.filter(film => film.title.toLowerCase().includes(searchData))\r\n      }\r\n    }\r\n    else\r\n      filmsFinal = films;\r\n  }\r\n  else{\r\n    if(searchData){\r\n      if(!isTitle){\r\n        filmsFinal = films.filter(film => film.stars.map(star => star.toLowerCase().includes(searchData)).some(result => result))\r\n      }\r\n      else{\r\n        filmsFinal = films.filter(film => film.title.toLowerCase().includes(searchData))\r\n      }\r\n    }\r\n    else\r\n      filmsFinal = films;\r\n  }\r\n\r\n  if(filmsFinal.length === 0)\r\n    filmsFinal = 'There is nothing here'\r\n\r\n  if(isSorted && Array.isArray(filmsFinal)){\r\n    return (\r\n      <ul className = 'filmlist-container'>\r\n        {\r\n          filmsFinal.sort((a, b) => { \r\n            return a.title.localeCompare(b.title);\r\n          }).map(film => (\r\n            <Film key={film.id} {...film} id = {film.id} onClick={() => toggleFilm(film.id)}/>\r\n          ))\r\n        }\r\n      </ul>\r\n    ) \r\n  }\r\n  else if(!isSorted && Array.isArray(filmsFinal))\r\n    return (\r\n      <ul className = 'filmlist-container'>\r\n        {\r\n          filmsFinal.sort((a, b) =>{\r\n            return a.id - b.id\r\n          }).map(film => (\r\n            <Film key={film.id} {...film} id = {film.id} onClick={() => toggleFilm(film.id)}/>\r\n          ))\r\n        }\r\n      </ul>\r\n    ) \r\n  else \r\n    return(\r\n      <ul className = 'filmlist-container'>\r\n        <li className = 'nothing-here'>{filmsFinal}</li>\r\n      </ul>\r\n    )\r\n}\r\n\r\nexport default FilmsList","import { connect } from 'react-redux'\r\nimport FilmsList from '../components/content/FilmsList'\r\nimport {toggleFilm} from '../actions'\r\n\r\nconst mapStateToProps = state => ({\r\n  films: state.films,\r\n  searchData: state.navigation.searchData,\r\n  isTitle: state.navigation.isTitle,\r\n  isSorted: state.navigation.isSorted\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  toggleFilm: id => dispatch(toggleFilm(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilmsList)","import React from 'react'\nimport NavBar from './commandBar/NavBar'\nimport FiltredFilmsList from '../containers/FiltredFilmsList'\n\nconst App = () => (\n  <div>\n    <NavBar />\n    <FiltredFilmsList />\n  </div>\n)\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App className = 'app' />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n\nexport {store}\n"],"sourceRoot":""}